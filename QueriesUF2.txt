02/10/2020
CREATE TABLE characters(
	id_character INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
	name VARCHAR(24) NOT NULL,
	age INT NOT NULL,
	hp INT NOT NULL,
	gender CHAR(1) NOT NULL,
	style CHAR(1) NOT NULL,
	mana INT NOT NULL,
	class CHAR(2) NOT NULL,
	race CHAR(2) NOT NULL,
	xp INT NOT NULL,
	level INT NOT NULL,
	height FLOAT NOT NULL
);

---Insert de characters
INSERT INTO characters (name,age,hp,gender,style,mana,class,race,xp,`level`,height) 
VALUES
	('Jacinto',12309,999,'F','R',100000,'Mg','Sg',1000000,0,2.1),
	('Alejandro',2,0,'M','M',1,'De','Nd',100,2,1.2),
	('Paca',43,100,'F','G',0,'Wa','Lo',500,70,4.52),
	('Maricarmen',2,100,'N','H',100,'T','B',200,100,0.25);

CREATE TABLE stats(
	id_stat INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
	intel INT NOT NULL,
	strenght INT NOT NULL,
	charisma INT NOT NULL,
	`level` INT NOT NULL,
	id_character INT UNSIGNED NOT NULL
);

--Insert en stats
INSERT INTO stats
(intel,strenght,charisma,`level`,id_character) 
VALUES
(33,22,333,33,1),(1,1,1,1,2),(75,2000,60,70,3),(9999,20,1,10,4)

06/11/2020
--Create table items types en orden
CREATE TABLE items_types(
    id_item_type INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
    type VARCHAR(16) NOT NULL
);

--CREATE TABLE ITEMS
CREATE TABLE items(
    id_item INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
	item VARCHAR(24) NOT NULL,
    cost INT NOT NULL,
    consumable BOOLEAN NOT NULL,
    tradeable BOOLEAN NOT NULL,
    weight FLOAT NOT NULL,
    image VARCHAR(32) NOT NULL,
    description TEXT NOT NULL,
    id_item_type INT UNSIGNED NOT NULL
	);
--CREATE TABLE CHARACTERS ITEMS
CREATE TABLE characters_items (
    id_character_item INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_character INT UNSIGNED NOT NULL,
    id_item INT UNSIGNED NOT NULL
    );

--Insert items types 3 o 4, 7 items, 4 personajes con 2 items cada uno 
poción

INSERT INTO items_types (type)
VALUES("Equipable"), 
("Consumible"),
("Otros"), 
("Clave")

INSERT INTO items (item,cost,consumable,tradeable,weight,image,description,id_item_type)
VALUES("Poción de vida", 25, true, true, 0.2, "health_potion.png", "Una poción que recupera vida", 2),
	("Gafas de sol", 100, false, true, 0.1, "sunglasses.png", "Gafas de sol facheritas", 1),
	("Guijarro", 0, false, false, 0.35, "small_stone.png", "Pequeña piedra que encuentras en el suelo y lo pudes tirar a alguien supongo", 3),
	("Agua de río", 1000, true, false, 0.5, "river_water.png", "Agua del río con propiedades medicinales que recupera energía de vitalidad", 4),
	("Manzana", 3, true, true, 0.3, "apple.png", "Manzana Pro", 2),
	("Llave", 25, false, false, 0.1, "key.png", "Llve que abre la puerta del destino", 4),
	("Gran Anillo", 300, false, true, 0.25, "big_ring.png", "Gran anillo de las profundidades", 1),
	("Papel", 2, false, true, 0.02, "paper.png", "Papel pequeño en blanco",3)

INSERT INTO characters_items (id_character,id_item) VALUES (1,1),(1,3),(1,4),(2,1),(3,2)

09/11/2020
--- Saber el tipo de los items
SELECT * FROM `items`,items_types
WHERE items.id_item_type=items_types.id_item_type

--Selecciona solo estos 3 campos
SELECT items.id_item, items.item, items_types.type 
FROM `items`,items_types
WHERE items.id_item_type=items_types.id_item_type

--Selecciona el character con sus stats
SELECT characters.id_character, characters.name, stats.intel, stats.strenght, stats.charisma, stats.level
FROM characters, stats
WHERE stats.id_character=characters.id_character

--Selecciona charcaters con items 
SELECT characters.id_character,characters.name, items.id_item, items.item
FROM characters, characters_items, items
WHERE characters.id_character=characters_items.id_character 
	AND items.id_item = characters_items.id_item

SELECT items.id_item, items.item
FROM characters, characters_items, items
WHERE characters.id_character=characters_items.id_character 
	AND items.id_item = characters_items.id_item
    AND characters.id_character=1

16/11/2020
---Queries que armors y weapons tiene cada personaje
CREATE TABLE weapons(
	id_weapon INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
    weapon VARCHAR(16) NOT NULL,
    damage INT NOT NULL,
    quality INT NOT NULL,
    rarity INT NOT NULL,
    weight INT NOT NULL,
    durability INT NOT NULL,
    `range` INT NOT NULL,
    id_weapon_type INT UNSIGNED NOT NULL
);
CREATE TABLE weapons_types(
    id_weapon_type INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
    type VARCHAR(24) NOT NULL
);
CREATE TABLE armours(
	id_armour INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
    armour VARCHAR(16) NOT NULL,
    defence INT NOT NULL,
    durability INT NOT NULL,
    weight INT NOT NULL,
    quality INT NOT NULL,
    rarity INT NOT NULL,
    toughness INT NOT NULL,
    id_armour_type INT UNSIGNED NOT NULL
);
CREATE TABLE armours_types (
	id_armour_type INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
    type VARCHAR(24) NOT NULL
);
CREATE TABLE characters_weapons(
	id_character_weapon INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_character INT UNSIGNED NOT NULL,
    id_weapon INT UNSIGNED NOT NULL
);
CREATE TABLE characters_armours(
	id_character_armour INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_character INT UNSIGNED NOT NULL,
    id_armour INT UNSIGNED NOT NULL
);

INSERT INTO weapons_types(type) VALUES ('Espada'),('Lanza'),('Hacha');
INSERT INTO armours_types(type) VALUES ('Ligera'),('Mediana'),('Pesada');

INSERT INTO weapons(weapon, damage, quality, rarity, weight, durability, `range`, id_weapon_type)
VALUES('Espada larga',200,30,10,10,500,100,1),
	('Espada corta',100,5,5,10,300,50,1),
	('Lanza de Midgar',400,100,50,100,1000,400,2),
	('Lanza de Shojin',500,70,20,50,900,300,2),
	('Cuchilla Negra',250,50,700,30,1200,250,3);
INSERT INTO characters_weapons (id_character,id_weapon) VALUES (1,3), (2,2), (3,4), (4,3);	

---Selecciona las weapons que tiene cada character
SELECT characters.id_character, characters.name, weapons.weapon
FROM characters, characters_weapons, weapons
WHERE characters.id_character=characters_weapons.id_character
	AND weapons.id_weapon=characters_weapons.id_weapon

---Selecciona las armours que tiene cada character
SELECT characters.id_character, characters.name, armours.armour
FROM characters, characters_armours, armours
WHERE characters.id_character=characters_armours.id_character
	AND armours.id_armour=characters_armours.id_armour


INSERT INTO armours(armour, defence, durability, weight, quality, rarity, toughness, id_armour_type)
VALUES()

---Update el nombre guijarro a Pedrusco (1 campo) 1 fila con un id
UPDATE items 
	SET items.item='Pedrusco' 
	WHERE items.id_item=3

---Update cost y weight de gafas de sol (Varios campos) Por un campo si quieres en toda la tabla
UPDATE items 
	SET cost=150, weight=0.2 
	WHERE id_item=2

---Insert un nuevo item equivocaros en item, tradeable, weight y hacer el update necesario con los datos buenos
 'Portátil chungo', 1500, false, true, 3, wierd_laptop.png, 'Portátil defectuoso hecho de acero inoxidable', 1

INSERT INTO items (item,cost,consumable,tradeable,weight,image,description,id_item_type)
VALUES('Portátil ungo', 1500, false, false, 30, 'wierd_laptop.png', 'Portátil defectuoso hecho de acero inoxidable', 1)

UPDATE items 
	SET item='Portátil chungo', tradeable=true, weight=3 
	WHERE id_item=9

---Ejercicio DELETE Insertar items falsos
INSERT INTO items (item)
VALUES('Papelera fugaz'),
	('Escritorio mortal'),
	('Columna molesta')

DELETE FROM items WHERE id_item=11
DELETE FROM items WHERE id_item=10 OR id_item=12

---Crear tabla skills con queries
CREATE TABLE skills(
    id_skill INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
    skill VARCHAR(24) NOT NULL,
    description TEXT NOT NULL,
    icon VARCHAR(16) NOT NULL
);

23/11/2020
---ORDER BY
SELECT * FROM characters ORDER BY name ASC(Por defecto)/ or DESC

---ORDER con dos columnas
SELECT * FROM characters 
ORDER BY age ASC, name DESC

---LIMIT (un numero) retorna a partir primero los resultados que ponemos
SELECT * FROM characters 
ORDER BY age ASC, name DESC
LIMIT 1

---Sentancia IN 
SELECT * FORM items
WHERE id_item IN (3,4,5,8)

---Ejercicio characters, items Personaje con varios items todos los items se muestren los dos primeros
SELECT characters.id_character, characters.name, items.item
FROM characters, items, characters_items
WHERE characters.id_character=characters_items.id_character AND
	items.id_item=characters_items.id_item AND characters.id_character=1
    LIMIT 2

---Crear tabla stats con Foreign Keys
CREATE TABLE stats(
	id_stat INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
	intel INT NOT NULL,
	strenght INT NOT NULL,
	charisma INT NOT NULL,
	`level` INT NOT NULL,
	id_character INT UNSIGNED NOT NULL,
    FOREIGN KEY (id_character) REFERENCES characters(id_character)
);

---Items characters_items Con Foreign Keys
DROP TABLE items;
DROP TABLE characters_items;

CREATE TABLE items(
    id_item INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
	item VARCHAR(24) NOT NULL,
    cost INT NOT NULL,
    consumable BOOLEAN NOT NULL,
    tradeable BOOLEAN NOT NULL,
    weight FLOAT NOT NULL,
    image VARCHAR(32) NOT NULL,
    description TEXT NOT NULL,
    id_item_type INT UNSIGNED NOT NULL,
	FOREIGN KEY (id_item_type) REFERENCES items_types(id_item_type)
	);

CREATE TABLE characters_items (
    id_character_item INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
    id_character INT UNSIGNED NOT NULL,
    id_item INT UNSIGNED NOT NULL,
	FOREIGN KEY (id_character) REFERENCES characters(id_character),
	FOREIGN KEY (id_item) REFERENCES items(id_item)
    );

INSERT INTO items (item,cost,consumable,tradeable,weight,image,description,id_item_type)
VALUES("Poción de vida", 25, true, true, 0.2, "health_potion.png", "Una poción que recupera vida", 2),
	("Gafas de sol", 100, false, true, 0.1, "sunglasses.png", "Gafas de sol facheritas", 1),
	("Guijarro", 0, false, false, 0.35, "small_stone.png", "Pequeña piedra que encuentras en el suelo y lo pudes tirar a alguien supongo", 3),
	("Agua de río", 1000, true, false, 0.5, "river_water.png", "Agua del río con propiedades medicinales que recupera energía de vitalidad", 4),
	("Manzana", 3, true, true, 0.3, "apple.png", "Manzana Pro", 2),
	("Llave", 25, false, false, 0.1, "key.png", "Llve que abre la puerta del destino", 4),
	("Gran Anillo", 300, false, true, 0.25, "big_ring.png", "Gran anillo de las profundidades", 1),
	("Papel", 2, false, true, 0.02, "paper.png", "Papel pequeño en blanco",3);

INSERT INTO characters_items (id_character,id_item) VALUES (1,1),(1,3),(1,4),(2,1),(3,2);

30/11/2020
---Toda las tablas seguidas con Foreign Keys
Archivo amongmeme_tables

04/12/2020
SELECT items.id_item, items.item 
FROM characters, characters_items, items 
WHERE characters.id_character=characters_items.id_character AND items.id_item=characters_items.id_item 
AND characters.id_character=1

14/12/2020
INSERT INTO characters_items (id_character, id_item)
VALUES (1,1) ,(2,2) ,(3,1) ,(2,2);

GROUP BY columna --- Agrupa todas las repeticiones en un resultado
---Ejemplo
SELECT * 
FROM characters_items
GROUP BY id_character

---- Couenta las repeticiones id_item tiene
SELECT id_character, id_item, COUNT(id_item)
FROM characters_items
GROUP BY id_character

---
SELECT id_character, id_item, COUNT(id_character)
FROM characters_items
WHERE id_item=1
GROUP BY id_character

---Canviar la columna de nombre
SELECT id_character, id_item, COUNT(id_character) AS num_items
FROM characters_items
WHERE id_item=1



SELECT 
	characters_items.id_item, 
	items.item, 
	COUNT(characters_items.id_item) AS num_items
FROM characters_items, items
WHERE items.id_item=characters_items.id_item
GROUP BY characters_items.id_item

18/12/2020
---Joins LEFT JOIN, RIGHT JOIN, INNER JOIN solo son usablesd
si las tables de donde se recogen los resultados estan relacionadas con Foreign Keys.
---Select con INNER JOIN
SELECT *
FROM `characters`
INNER JOIN `stats`
ON characters.id_character = stats.id_character

---INNER JOIN con weapons y su tipo
SELECT weapons.id_weapon, weapons.weapon, weapons_types.type
FROM `weapons_types`
INNER JOIN `weapons`
	ON weapons_types.id_weapon_type=weapons.id_weapon_type


SELECT items.id_item, items.item, items_types.type
FROM `items_types`
LEFT JOIN `items`
	ON items_types.id_item_type=items.id_item_type
    ORDER BY items.id_item


---Insert type y update guijarro a municion
INSERT INTO items_types (type) VALUES ("Especial"),("Munición");

UPDATE items
	SET id_item_type=6
	WHERE id_item=3

---Ejercicio JOINS
SELECT characters.name, items.item
FROM characters
INNER JOIN characters_items
	ON characters.id_character=characters_items.id_character
INNER JOIN items
	ON items.id_item=characters_items.id_item

SELECT characters.name, items.item
FROM characters
LEFT JOIN characters_items
	ON characters.id_character=characters_items.id_character
LEFT JOIN items
	ON items.id_item=characters_items.id_item

SELECT characters.name, items.item
FROM characters
LEFT JOIN characters_items
	ON characters.id_character=characters_items.id_character
RIGHT JOIN items

SELECT characters.name, items.item
FROM characters
LEFT JOIN characters_items
	ON characters.id_character=characters_items.id_character
INNER JOIN items
	ON items.id_item=characters_items.id_item

12/01/2021
Funciones de SQL Predefinidas como MAX(columna)

15/01/2021
SET lc_time_names='es_ES'
SELECT DAYNAME('2021-01-15'), MONTHNAME('2021-01-13')
lc Varables locale traduccion del sitio en question

SET @reshulon_xd := 17; Inicalizar una variable
SET @reshulon_xd = 3; Setea la variable a un valor

Procedure NO retorna valor
Function SI retorna valor

19/01/2021
DELIMITER ;
DROP PROCEDURE IF EXISTS getItemNameById;
DELIMITER $$
CREATE PROCEDURE getItemNameById (IN iditem INT, OUT name VARCHAR(16))
	BEGIN
    	SELECT item INTO name FROM items 
        WHERE id_item=iditem;
    END$$
DELIMITER ;

CALL getItemNameById(3, @item);

SELECT @item

-----Get items by character id PROCEDURE
DROP PROCEDURE IF EXISTS getItemsByCharacterId;
DELIMITER $$

CREATE PROCEDURE getItemsByCharacterId(IN in_id_character INT UNSIGNED, 
                                       OUT out_id_item INT UNSIGNED,
                                      	OUT out_item VARCHAR (24),
                                        OUT out_cost INT)
BEGIN
	SELECT items.id_item, items.id_item, items.cost INTO out_id_item,out_item,out_cost
	FROM characters
	LEFT JOIN characters_items
		ON characters.id_character=characters_items.id_character
	LEFT JOIN items
		ON items.id_item=characters_items.id_item
    WHERE characters.id_character=in_id_character;
END$$

DELIMITER ;

CALL getItemsByCharacterId(1, @iditem, @item, @cost);

SELECT @idtem, @item, @cost;
---------------------------------------------------------

DROP PROCEDURE IF EXISTS getItemsByCharacterId;
DELIMITER $$

CREATE PROCEDURE getItemByCharacterId(IN in_id_character INT UNSIGNED, 
                                       OUT out_id_item INT UNSIGNED,
                                      	OUT out_item VARCHAR (24),
                                        OUT out_cost INT)
BEGIN
	SELECT items.id_item, items.id_item, items.cost INTO out_id_item,out_item,out_cost
	FROM characters
	LEFT JOIN characters_items
		ON characters.id_character=characters_items.id_character
	LEFT JOIN items
		ON items.id_item=characters_items.id_item
    WHERE characters.id_character=in_id_character
    LIMIT 1;
END$$

DELIMITER ;

CALL getItemsByCharacterId(1, @iditem, @item, @cost);

SELECT @idtem, @item, @cost;

--------------BUCLES-------------------------------
DELIMITER $$

CREATE PROCEDURE doiterate(p1 INT)
BEGIN
	label1: LOOP	
    	SET p1 = p1 + 1;
        IF p1 < 10 THEN
        	ITERATE label1;
        END IF;
        LEAVE label1;
    END LOOP label1;
    SET @x = p1;
END$$

DELIMITER ;

26/01/2021
---Procedure Insertitem
---id personaje, id item i inserte en la tabla characters_items items

DROP PROCEDURE IF EXISTS relate_character_item;

DELIMITER $$

CREATE PROCEDURE relate_character_item (IN in_id_character INT UNSIGNED, IN in_id_item INT UNSIGNED)
BEGIN
	INSERT INTO characters_items(id_character, id_item) VALUES(in_id_character, in_id_item);
END$$

DELIMITER ;

CALL relate_character_item(1, 5);

SELECT * FROM characters_items;

---Function Insert Item
---Parametros todos menos image, description


DELIMITER $$

CREATE FUNCTION insert_item(in_item VARCHAR(24), 
			in_cost INT, in_consumable BOOLEAN, 
			in_tradeable BOOLEAN, in_weight FLOAT, 
			in_id_item_type INT UNSIGNED)RETURNS INT UNSIGNED
BEGIN
	INSERT INTO items(item, cost, consumable, tradeable, weight, id_item_type) 
	VALUES(in_item, in_cost, in_consumable, in_tradeable, in_weight, in_id_item_type);
	RETURN LAST_INSERT_ID();
END$$

DELIMITER ;

SELECT insert_item('Rotulador, Verde', 100, FALSE, TRUE, 1000, 2);

---Function id_item_by_name('Llave'); 
Pasad un nombre de item retorne 
DELIMITER $$
CREATE FUNCTION id_item_by_name(in_item VARCHAR(24)) RETURNS INT UNSIGNED 
BEGIN
	SET @id := 0;
	SELECT id_item INTO @id FROM items WHERE item LIKE in_item LIMIT 1;
	RETURN @id;
END$$

DELIMITER ;

---Function   pasar una palabra i que retorne el id